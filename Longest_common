#include<iostream>
#include<string>
#include<iomanip>

using namespace std;
//整体和上一个相同，只是读取方式和输出部分稍有改动
int matrix[12000][12000];
int route[12000][12000];

int match(char seq1[],char seq2[],int i,int j,int alpha,int beta)
{
	int m = 0;
	if(seq1[j - 1] == seq2[i - 1])
	{
		m = alpha;
	}
	else
	{
		m = beta;
	}
	return m;
}

void align(char seq1[],char seq2[],int len1,int len2,int alpha,int beta,int gamma)
{
	
	int a = 0, b = 0,c = 0;
	int i = 0, j = 0;
	for(i = 0;i <= len1; i++)
	{
		matrix[0][i] = 0 + i * gamma;
		route[0][i] = 1;
	}
	for(j = 0;j <= len2; j++)
	{
		matrix[j][0] = 0 + j * gamma;
		route[j][0] = 2;
	}
	matrix[0][0] = 0;
	route[0][0] = 0;
	for(i = 1; i <= len2; i++)
	{
		for(j = 1; j <= len1; j++)
		{
			a = matrix[i][j - 1] + gamma;
			b = matrix[i - 1][j] + gamma;
			c = matrix[i - 1][j - 1] + match(seq1,seq2,i,j,alpha,beta);
			if(a >= b && a >= c)
			{
				matrix[i][j] = a;
				route[i][j] = 1;
			}
			else if(b >= a && b >= c)
			{
				matrix[i][j] = b;
				route[i][j] = 2;
			}
			else
			{
				matrix[i][j] = c;
				route[i][j] = 3;
			}
		}
	}
}



void output(char seq1[],char seq2[],int len1,int len2)
{
	char ans[12000];
	int j = len1;
	int i = len2;
	int m = 0;
	int n = 0;
	int t = 0;
	int ans1_point = len1;
	int ans2_point = len2;
	while(route[i][j] != 0)
	{
		if(route[i][j] == 3)
		{
			ans[t] = seq1[ans1_point - 1];
			ans1_point--;;
			ans2_point--;
			i--;
			j--;		
			t++;
		}
		else if(route[i][j] == 2)
		{
			ans2_point--;
			i--;
		}
		else
		{
			ans1_point--;
			j--;
		}
	}
	char fin[12000];
	for(int w = 0; w<t;w++)
	{
		fin[t-w-1] = ans[w];
	}
	fin[t] = '\0';
	cout<<"longest common subsequence:"<<fin<<endl;
	cout<<"length:"<<t<<endl;
}

int main()
{
	int alpha,beta,gamma;
	//char seq1[] = "acbaed";
	//char seq2[] = "abcadf";
	char seq1[12000];
	char seq2[12000];
    FILE *Long_C = fopen("LongestCommonSeq.txt","r");
	fgets(seq1,12000,Long_C);
	fgets(seq2,12000,Long_C);
	int len1 = strlen(seq1);
	int len2 = strlen(seq2);
	alpha = 1;
	beta = 0;
	gamma = 0;
	align(seq1,seq2,len1,len2,alpha,beta,gamma);
	output(seq1,seq2,len1,len2);
	return 0;
}

